akka {
    loglevel = INFO
    persistence.journal.plugin = "akka.persistence.journal.leveldb"
    persistence.journal.leveldb.dir = "target/rtjvm/journal"
    actor.allow-java-serialization = on

    persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    persistence.snapshot-store.local.dir = "target/rtjvm/snapshot"
}

mySpecialConfig {
    akka {
        loglevel = INFO
    }
}


localStores {
    akka {
        persistence.journal.plugin = "akka.persistence.journal.leveldb"
        persistence.journal.leveldb.dir = "target/localStores/journal"
        persistence.journal.leveldb.compaction-intervals {
            simple-persistent-actor = 1000
            "*" = 5000
        }
        actor.allow-java-serialization = on

        persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
        persistence.snapshot-store.local.dir = "target/localStores/snapshot"
    }
}

postgresDemo {
    akka {
        persistence.journal.plugin = "jdbc-journal"
        persistence.snapshot-store.plugin = "jdbc-snapshot-store"
    }

    jdbc-journal {
      use-shared-db = "slick"
    }

    jdbc-snapshot-store {
      use-shared-db = "slick"
    }

    akka-persistence-jdbc {
      shared-databases {
        slick {
          profile = "slick.jdbc.PostgresProfile$"
          db {
            host = "localhost"
            host = ${?DB_HOST}
            url = "jdbc:postgresql://localhost:5444/rtjvm?reWriteBatchedInserts=true"
            user = "docker"
            password = "docker"
            driver = "org.postgresql.Driver"
            numThreads = 10
            maxConnections = 10
            minConnections = 1
          }
        }
      }
    }
}

cassandraDemo {
    akka {
        persistence.journal.plugin = "akka.persistence.cassandra.journal"
        persistence.snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

        persistence.cassandra.journal.keyspace-autocreate = true
        persistence.cassandra.journal.tables-autocreate = true

        persistence.cassandra.snapshot.keyspace-autocreate = true
        persistence.cassandra.snapshot.tables-autocreate = true
    }

    # default values
}

eventAdapters {
    akka {
        persistence.journal.plugin = "akka.persistence.cassandra.journal"
        persistence.snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
        actor.allow-java-serialization = on
        persistence.cassandra.journal.keyspace-autocreate = true
        persistence.cassandra.journal.tables-autocreate = true

        persistence.cassandra.snapshot.keyspace-autocreate = true
        persistence.cassandra.snapshot.tables-autocreate = true

        persistence.journal.inmem {
            event-adapters {
                guitar-inventory-enhancer = "playground.akka.persistence.part4_practices.EventAdapters$GuitarReadEventAdapter"
            }

            event-adapter-bindings {
                "playground.akka.persistence.part4_practices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
            }
        }
    }
}
# times assertions test mySpecialConfig
specialTimedAssertionsConfig {
    akka.test.single-expect-default = 0.3s
}

# Intercepring log messages test
interceptingLogMessages {
    akka {
        loggers = ["akka.testkit.TestEventListener"]
    }
}

# routers demo
routersDemo {
    akka {
        actor.deployment {
            /poolMaster2 { #/ means user guardian or we can say its path - rest is actor name
                router = round-robin-pool
                nr-of-instances = 5
            }

            /groupMaster2 {
                router = round-robin-group
                routees.paths = ["/user/slave_1","/user/slave_2","/user/slave_3","/user/slave_4","/user/slave_5"]
            }
        }
    }
}

#dispatchers demo
my-dispatcher {
    type = Dispatcher # PinnedDispatchers
    executor = "thread-pool-executor"
    thread-pool-executor {
        fixed-pool-size = 3
    }
    throughput = 30  # this is the number of messages that a dispatcher can handle for one actor until that thread moves to another actor
}

dispatchersDemo {
    akka.actor.deployment {
        /rtjvm {
            dispatcher = my-dispatcher
        }
    }
}

#mailboxes demo
mailboxesDemo {
    control-mailbox {
        mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }

    support-ticket-dispatcher {
        mailbox-type = "playground.akka.essentials.part5infra.Mailboxes$SupportTicketPriorityMailBox"
    }

    akka.actor.deployment {
        /altControlAwareActor {
            mailbox = control-mailbox
        }
    }
}