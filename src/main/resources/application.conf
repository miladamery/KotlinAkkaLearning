akka {
    loglevel = INFO
    persistence.journal.plugin = "akka.persistence.journal.leveldb"
    persistence.journal.leveldb.dir = "target/rtjvm/journal"
    actor.allow-java-serialization = on
}

mySpecialConfig {
    akka {
        loglevel = INFO
    }
}

# times assertions test mySpecialConfig
specialTimedAssertionsConfig {
    akka.test.single-expect-default = 0.3s
}

# Intercepring log messages test
interceptingLogMessages {
    akka {
        loggers = ["akka.testkit.TestEventListener"]
    }
}

# routers demo
routersDemo {
    akka {
        actor.deployment {
            /poolMaster2 { #/ means user guardian or we can say its path - rest is actor name
                router = round-robin-pool
                nr-of-instances = 5
            }

            /groupMaster2 {
                router = round-robin-group
                routees.paths = ["/user/slave_1","/user/slave_2","/user/slave_3","/user/slave_4","/user/slave_5"]
            }
        }
    }
}

#dispatchers demo
my-dispatcher {
    type = Dispatcher # PinnedDispatchers
    executor = "thread-pool-executor"
    thread-pool-executor {
        fixed-pool-size = 3
    }
    throughput = 30  # this is the number of messages that a dispatcher can handle for one actor until that thread moves to another actor
}

dispatchersDemo {
    akka.actor.deployment {
        /rtjvm {
            dispatcher = my-dispatcher
        }
    }
}

#mailboxes demo
mailboxesDemo {
    control-mailbox {
        mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }

    support-ticket-dispatcher {
        mailbox-type = "playground.akka.essentials.part5infra.Mailboxes$SupportTicketPriorityMailBox"
    }

    akka.actor.deployment {
        /altControlAwareActor {
            mailbox = control-mailbox
        }
    }
}